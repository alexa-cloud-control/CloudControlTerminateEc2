sudo: required
dist: trusty
language: bash

stages:
  # - name: Terraform run
  - name: Perform tests
  # - name: Deploy code
  #   if: branch = master && type != cron  

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli  
  - curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.5/terraform_0.12.5_linux_amd64.zip
  - unzip /tmp/terraform.zip -d /tmp
  - mv /tmp/terraform ~/bin
  - export PATH="~/bin:$PATH"

jobs:
  include:
    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/cloud_control_describe_ec2_tags.py requirements-custom.txt
    
    # - stage: Perform tests
    #   dist: trusty
    #   language: java
    #   sudo: required
    #   addons:
    #     sonarcloud:
    #       organization: "alexa-cloud-control"
    #       token: 
    #         secure: ""

      
    #   jdk:
    #     - oraclejdk8

    #   script:
    #     - sudo chmod +x $(which sonar-scanner)
    #     - export PATH=$(dirname $(which sonar-scanner)):$PATH
    #     - sonar-scanner

    # - stage: Terraform run
    #   env:
    #     - TF_INPUT=false # No interraction
    #   script:
    #     - cd provision
    #     - echo "Feeding terraform.tf with variables."
    #     - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tf_template
    #     - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tf_template
    #     - sed -i -e "s/REGION/${terraform_region}/g" terraform.tf_template
    #     - mv terraform.tf_template terraform.tf
    #     - echo "Feeding terraform.tfvars with variables."
    #     - sed -i -e "s/REGION/${terraform_region}/g" terraform.tfvars_template
    #     - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tfvars_template
    #     - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tfvars_template
    #     - sed -i -e "s/ARTIFACTBUCKETNAME/${artifact_bucket}/g" terraform.tfvars_template
    #     - sed -i -e "s/ENVIRONMENT/${terraform_environment}/g" terraform.tfvars_template
    #     - mv terraform.tfvars_template terraform.tfvars
    #     - terraform init
    #     - terraform validate
    #     - ./execute.sh

    # - stage: Deploy code
    #   script: skip
    #   deploy:
    #     - provider: s3
    #       bucket: "${artifact_bucket}"
    #       local_dir: py
    #       skip_cleanup: true

    #     - provider: lambda
    #       function_name: "cloud_control_terminate_ec2"
    #       region: "${terraform_region}"
    #       role: "arn:aws:iam::${account_number}:role/LambdaAlexaCloudControlTerminateEc2IamRole"
    #       runtime: "python3.6"
    #       module_name: "cloud_control_terminate_ec2"
    #       handler_name: "cloud_control_terminate_ec2
    #       description: "Alexa EC2 - Terminate EC2"
    #       memory_size: 128
    #       timeout: 5
    #       zip: py/cloud_control_terminate_ec2.py

