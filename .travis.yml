sudo: required
dist: trusty
language: bash

stages:
  # - name: Terraform run
  - name: Perform tests
  # - name: Deploy code
  #   if: branch = master && type != cron  

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli  
  - curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.5/terraform_0.12.5_linux_amd64.zip
  - unzip /tmp/terraform.zip -d /tmp
  - mv /tmp/terraform ~/bin
  - export PATH="~/bin:$PATH"

jobs:
  include:
    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/cloud_control_terminate_ec2.py requirements-custom.txt
    
    - stage: Perform tests
      dist: trusty
      language: java
      sudo: required
      addons:
        sonarcloud:
          organization: "alexa-cloud-control"
          token: 
            secure: "Aw44rJNvGrBXFxh8B+393jm1PWk47GO+nDXeNCue63AXR5OU9VF3FgEc9A8RJuehvwMlhGvE+cBmavr2r/nNMPoVZqsBd35k+9Tj20muz14mGuec9/KXe+0ac5v+e1DVML52rs7Nb9o+oxCaTrf2qNHmCbLnu/1V/pcwG+XRM8LUXydR5+rQ19OYp9KybWElJn6SyRS78ujqlcSeE6rFMTarKZ6XYmZ6ueEdZdKvH6dt0IY+xnsqbKiRRTbQM26+++ph20Kr8vkhbG8vtN4ZrSKBe6b3NwcD2QULK3DPKvvyDrxQeb+L8N8BBX4NXbUQ5iYMZh0fGdzEfPIr18B36PuziOjX7AKGcRW5dlmtX1BdMbE/9/Ndc6s+M4RvJmn53Y1J+b/9hyG9ZYyV79njGbhPZtGe8ZOFG02hanxBAKnJ9GaZrGY5YdbgbUT+CF/QUBVB3GapRe4FX/OujFUojJJyvdj0M0Gti7zV14QZBvj6y870arr4QpY5aL9HaomboH0IgqyEWuCu3h/HKGZdcWbYWUIIIolBsdXFXTw9Pg1pjOrwh2KttCkVH6TxP2JRIbIpjorntsgvhXqyiLLMdQk86Oq4kZc/1c2Yj+XhaVHpQFYIsVmEGKmCt1ZjYSncf8LbGFHAEcucKco+SQHBnDuHFYnR6YCjCLpdyUfuzYI="
      
      jdk:
        - oraclejdk8

      script:
        - sudo chmod +x $(which sonar-scanner)
        - export PATH=$(dirname $(which sonar-scanner)):$PATH
        - sonar-scanner

    # - stage: Terraform run
    #   env:
    #     - TF_INPUT=false # No interraction
    #   script:
    #     - cd provision
    #     - echo "Feeding terraform.tf with variables."
    #     - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tf_template
    #     - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tf_template
    #     - sed -i -e "s/REGION/${terraform_region}/g" terraform.tf_template
    #     - mv terraform.tf_template terraform.tf
    #     - echo "Feeding terraform.tfvars with variables."
    #     - sed -i -e "s/REGION/${terraform_region}/g" terraform.tfvars_template
    #     - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tfvars_template
    #     - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tfvars_template
    #     - sed -i -e "s/ARTIFACTBUCKETNAME/${artifact_bucket}/g" terraform.tfvars_template
    #     - sed -i -e "s/ENVIRONMENT/${terraform_environment}/g" terraform.tfvars_template
    #     - mv terraform.tfvars_template terraform.tfvars
    #     - terraform init
    #     - terraform validate
    #     - ./execute.sh

    # - stage: Deploy code
    #   script: skip
    #   deploy:
    #     - provider: s3
    #       bucket: "${artifact_bucket}"
    #       local_dir: py
    #       skip_cleanup: true

    #     - provider: lambda
    #       function_name: "cloud_control_terminate_ec2"
    #       region: "${terraform_region}"
    #       role: "arn:aws:iam::${account_number}:role/LambdaAlexaCloudControlTerminateEc2IamRole"
    #       runtime: "python3.6"
    #       module_name: "cloud_control_terminate_ec2"
    #       handler_name: "cloud_control_terminate_ec2
    #       description: "Alexa EC2 - Terminate EC2"
    #       memory_size: 128
    #       timeout: 5
    #       zip: py/cloud_control_terminate_ec2.py

