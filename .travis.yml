os: linux
language: shell

stages:
  - name: Perform tests
  - name: Prepare artifact
    if: branch = master && type != cron
  - name: Deploy
    if: branch = master && type != cron 

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli

jobs:
  include:
    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/cloud_control_terminate_ec2.py requirements-custom.txt
    
    - stage: Perform tests
      os: linux
      language: java
      addons:
        sonarcloud:
          organization: "alexa-cloud-control"
          token:
            secure: "Aw44rJNvGrBXFxh8B+393jm1PWk47GO+nDXeNCue63AXR5OU9VF3FgEc9A8RJuehvwMlhGvE+cBmavr2r/nNMPoVZqsBd35k+9Tj20muz14mGuec9/KXe+0ac5v+e1DVML52rs7Nb9o+oxCaTrf2qNHmCbLnu/1V/pcwG+XRM8LUXydR5+rQ19OYp9KybWElJn6SyRS78ujqlcSeE6rFMTarKZ6XYmZ6ueEdZdKvH6dt0IY+xnsqbKiRRTbQM26+++ph20Kr8vkhbG8vtN4ZrSKBe6b3NwcD2QULK3DPKvvyDrxQeb+L8N8BBX4NXbUQ5iYMZh0fGdzEfPIr18B36PuziOjX7AKGcRW5dlmtX1BdMbE/9/Ndc6s+M4RvJmn53Y1J+b/9hyG9ZYyV79njGbhPZtGe8ZOFG02hanxBAKnJ9GaZrGY5YdbgbUT+CF/QUBVB3GapRe4FX/OujFUojJJyvdj0M0Gti7zV14QZBvj6y870arr4QpY5aL9HaomboH0IgqyEWuCu3h/HKGZdcWbYWUIIIolBsdXFXTw9Pg1pjOrwh2KttCkVH6TxP2JRIbIpjorntsgvhXqyiLLMdQk86Oq4kZc/1c2Yj+XhaVHpQFYIsVmEGKmCt1ZjYSncf8LbGFHAEcucKco+SQHBnDuHFYnR6YCjCLpdyUfuzYI="

      script:
        - sonar-scanner

    - stage: Perform tests
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-TerminateEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-TerminateEc2.yml
        - aws cloudformation validate-template --region ${terraform_region} --template-body file://Alexa-CC-TerminateEc2.yml

    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-TerminateEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-TerminateEc2.yml
        - docker pull almerhor/cfnlint:latest
        - docker run --rm -v $(pwd)/:/lintfiles almerhor/cfnlint -t Alexa-CC-TerminateEc2.yml

    - stage: Prepare artifact
      os: linux
      language: python
      python:
        - "3.6"
      script:
        - echo "Building package"
        - cd artifacts/scripts
        - chmod +x *.sh
        - ./env_prep.sh
        - cd ../..
        - echo "Send artifact to S3"
      deploy:
        - provider: s3
          bucket: "${artifact_bucket}"
          local_dir: artifacts/package
          skip_cleanup: true

    - stage: Deploy
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-TerminateEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-TerminateEc2.yml
      deploy:
        provider: cloudformation
        edge: true # use DPLv2
        access_key_id: ${AWS_ACCESS_KEY_ID}
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        capabilities: CAPABILITY_NAMED_IAM
        template: Alexa-CC-TerminateEc2.yml
        stack_name: Alexa-CC-TerminateEc2-Function
        region: ${terraform_region}
        wait: true
        promote: true